# Claude Code Settings - React Fast Training Project
# Enhanced hooks configuration based on Claude Code best practices

# Pre-Tool Use Hooks - Run before tools execute
[[hooks]]
event = "PreToolUse"
# Enhanced security check for all file modifications
[hooks.matcher]
tool_name = ["Edit", "MultiEdit", "Write"]
command = "$CLAUDE_PROJECT_DIR/.claude/hooks/security-check.py"
timeout = 10000
description = "Security validation for file modifications"

[[hooks]]
event = "PreToolUse"
# Block modifications to critical files
[hooks.matcher]
tool_name = ["Edit", "MultiEdit", "Write"]
file_paths = ["**/package-lock.json", "**/yarn.lock", "**/.env*", "**/secrets/**"]
command = "echo '‚ùå BLOCKED: Cannot modify protected file' && exit 1"
description = "Block protected file modifications"

[[hooks]]
event = "PreToolUse"
# Validate TypeScript syntax before editing
[hooks.matcher]
tool_name = ["Edit", "MultiEdit", "Write"]
file_paths = ["*.ts", "*.tsx"]
command = "cd $CLAUDE_PROJECT_DIR && npx tsc --noEmit --skipLibCheck $CLAUDE_FILE_PATHS 2>&1 | head -10 || true"
run_in_background = true
timeout = 30000
description = "TypeScript syntax validation"

# Post-Tool Use Hooks - Run after tools complete
[[hooks]]
event = "PostToolUse"
# Auto-format TypeScript/JavaScript files
[hooks.matcher]
tool_name = ["Edit", "MultiEdit", "Write"]
file_paths = ["*.ts", "*.tsx", "*.js", "*.jsx"]
command = "cd $CLAUDE_PROJECT_DIR && npx prettier --write $CLAUDE_FILE_PATHS --log-level error 2>/dev/null || true"
run_in_background = true
timeout = 15000
description = "Prettier auto-formatting"

[[hooks]]
event = "PostToolUse"
# Run ESLint with auto-fix
[hooks.matcher]
tool_name = ["Edit", "MultiEdit", "Write"]
file_paths = ["src/**/*.ts", "src/**/*.tsx", "src/**/*.js", "src/**/*.jsx"]
command = """cd $CLAUDE_PROJECT_DIR && \
npx eslint $CLAUDE_FILE_PATHS --fix --quiet 2>&1 | \
grep -E '(error|warning)' | head -10 || echo '‚úÖ ESLint: No issues found'"""
run_in_background = true
timeout = 20000
description = "ESLint validation and auto-fix"

[[hooks]]
event = "PostToolUse"
# Run related tests for modified files
[hooks.matcher]
tool_name = ["Edit", "MultiEdit", "Write"]
file_paths = ["src/**/*.ts", "src/**/*.tsx", "src/**/*.js", "src/**/*.jsx"]
command = "$CLAUDE_PROJECT_DIR/.claude/hooks/test-runner.sh"
run_in_background = true
timeout = 60000
description = "Automated test execution"

[[hooks]]
event = "PostToolUse"
# CSS/Tailwind validation
[hooks.matcher]
tool_name = ["Edit", "MultiEdit", "Write"]
file_paths = ["*.css", "*.scss", "*.tsx", "*.jsx"]
command = """cd $CLAUDE_PROJECT_DIR && \
npx tailwindcss --no-autoprefixer -i ./src/styles/globals.css -o /tmp/tailwind-check.css 2>&1 | \
grep -E '(warn|error)' | head -5 || echo '‚úÖ Tailwind: Valid'"""
run_in_background = true
timeout = 10000
description = "Tailwind CSS validation"

[[hooks]]
event = "PostToolUse"
# Backend TypeScript validation for LoopBack
[hooks.matcher]
tool_name = ["Edit", "MultiEdit", "Write"]
file_paths = ["backend-loopback4/**/*.ts"]
command = """cd $CLAUDE_PROJECT_DIR/backend-loopback4 && \
npm run build:check 2>&1 | grep -E '(error|ERROR)' | head -10 || echo '‚úÖ Backend: Build check passed'"""
run_in_background = true
timeout = 30000
description = "LoopBack backend validation"

[[hooks]]
event = "PostToolUse"
# Git status check for large changes
[hooks.matcher]
tool_name = ["Edit", "MultiEdit"]
file_paths = ["src/**/*", "backend-loopback4/**/*"]
command = """cd $CLAUDE_PROJECT_DIR && \
changed=$(git diff --numstat | wc -l) && \
if [ $changed -gt 10 ]; then \
  echo \"üìù $changed files modified - Consider committing: git add -p && git commit\"; \
fi"""
run_in_background = true
description = "Git change notification"

[[hooks]]
event = "PostToolUse"
# Comprehensive code quality checks
[hooks.matcher]
tool_name = ["Edit", "MultiEdit", "Write"]
file_paths = ["src/**/*.ts", "src/**/*.tsx", "src/**/*.js", "src/**/*.jsx"]
command = "$CLAUDE_PROJECT_DIR/.claude/hooks/lint-check.sh"
run_in_background = true
timeout = 45000
description = "Comprehensive code quality validation"

[[hooks]]
event = "PostToolUse"
# Dependency security and update checks
[hooks.matcher]
tool_name = ["Edit", "Write"]
file_paths = ["**/package.json"]
command = "$CLAUDE_PROJECT_DIR/.claude/hooks/dependency-check.sh"
run_in_background = true
timeout = 30000
description = "Dependency security and version checking"

# User Prompt Submit Hooks
[[hooks]]
event = "UserPromptSubmit"
command = """echo \"[$(date '+%Y-%m-%d %H:%M:%S')] Prompt: $(echo $CLAUDE_USER_PROMPT | head -c 100)...\" >> $CLAUDE_PROJECT_DIR/.claude/activity.log"""
run_in_background = true
description = "Activity logging"

# Post Response Hooks
[[hooks]]
event = "PostResponse"
command = """cd $CLAUDE_PROJECT_DIR && \
status=$(git status --porcelain | wc -l) && \
if [ $status -gt 0 ]; then \
  echo \"üìã Git Status: $status uncommitted changes\"; \
  git status --short | head -5; \
fi"""
run_in_background = false
description = "Git status summary"

[[hooks]]
event = "PostResponse"
# Memory usage check
command = """echo \"üíæ Memory: $(free -h | grep Mem | awk '{print $3 \"/\" $2}') | ‚ö° Load: $(uptime | awk -F'load average:' '{print $2}')\""""
run_in_background = true
description = "System resource check"

# Notification Hooks
[[hooks]]
event = "Notification"
command = """echo \"üîî Claude Code Notification at $(date '+%H:%M:%S')\""""
run_in_background = true
description = "Notification timestamp"

# Business Logic Validators
[[hooks]]
event = "PostToolUse"
# GDPR compliance checker
[hooks.matcher]
tool_name = ["Edit", "MultiEdit", "Write"]
file_paths = ["**/components/booking/**", "**/components/auth/**", "**/components/contact/**", "**/admin/features/users/**"]
command = "$CLAUDE_PROJECT_DIR/.claude/hooks/gdpr-compliance-check.py"
run_in_background = false
timeout = 10000
description = "GDPR compliance validation"

[[hooks]]
event = "PostToolUse"
# Booking capacity validator
[hooks.matcher]
tool_name = ["Edit", "MultiEdit", "Write"]
file_paths = ["**/booking/**", "**/session/**", "**/schedule/**", "**/capacity/**"]
command = "$CLAUDE_PROJECT_DIR/.claude/hooks/booking-capacity-validator.sh"
run_in_background = true
timeout = 15000
description = "Booking capacity and business rules validation"

[[hooks]]
event = "PostToolUse"
# Certificate template validator
[hooks.matcher]
tool_name = ["Edit", "MultiEdit", "Write"]
file_paths = ["**/certificate/**", "**/cert/**", "**/completion/**", "**/attendee/**"]
command = "$CLAUDE_PROJECT_DIR/.claude/hooks/certificate-template-validator.py"
run_in_background = false
timeout = 10000
description = "Certificate compliance validation"

[[hooks]]
event = "PreToolUse"
# Database migration validator
[hooks.matcher]
tool_name = ["Edit", "MultiEdit", "Write"]
file_paths = ["**/migrations/**", "**/migration/**", "**/*.migration.*", "**/schema.*"]
command = "$CLAUDE_PROJECT_DIR/.claude/hooks/database-migration-validator.sh"
run_in_background = false
timeout = 15000
description = "Database migration safety validation"

# UI/UX Consistency Validators
[[hooks]]
event = "PostToolUse"
# Design system enforcer
[hooks.matcher]
tool_name = ["Edit", "MultiEdit", "Write"]
file_paths = ["**/*.tsx", "**/*.jsx", "**/*.css", "**/*.scss"]
command = "$CLAUDE_PROJECT_DIR/.claude/hooks/design-system-enforcer.py"
run_in_background = true
timeout = 20000
description = "Design system consistency enforcement"

[[hooks]]
event = "PostToolUse"
# Mobile responsiveness checker
[hooks.matcher]
tool_name = ["Edit", "MultiEdit", "Write"]
file_paths = ["**/*.tsx", "**/*.jsx", "**/*.css"]
command = "$CLAUDE_PROJECT_DIR/.claude/hooks/mobile-responsiveness-checker.sh"
run_in_background = true
timeout = 15000
description = "Mobile-first design validation"

[[hooks]]
event = "PostToolUse"
# Loading state validator
[hooks.matcher]
tool_name = ["Edit", "MultiEdit", "Write"]
file_paths = ["**/*.tsx", "**/*.jsx"]
command = "$CLAUDE_PROJECT_DIR/.claude/hooks/loading-state-validator.py"
run_in_background = true
timeout = 10000
description = "Async operation loading state validation"

[[hooks]]
event = "PostToolUse"
# Form validation consistency
[hooks.matcher]
tool_name = ["Edit", "MultiEdit", "Write"]
file_paths = ["**/form/**", "**/Form.tsx", "**/Form.jsx", "**/*Form.tsx", "**/*Form.jsx"]
command = "$CLAUDE_PROJECT_DIR/.claude/hooks/form-validation-consistency.py"
run_in_background = true
timeout = 10000
description = "Form validation pattern consistency"

# Business Rules Validators
[[hooks]]
event = "PostToolUse"
# Pricing and course duration validator
[hooks.matcher]
tool_name = ["Edit", "MultiEdit", "Write"]
file_paths = ["**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx"]
command = "$CLAUDE_PROJECT_DIR/.claude/hooks/pricing-course-validator.py"
run_in_background = true
timeout = 10000
description = "Pricing consistency and course duration validation"

[[hooks]]
event = "PreToolUse"
# Payment security validator
[hooks.matcher]
tool_name = ["Edit", "MultiEdit", "Write"]
file_paths = ["**/payment/**", "**/checkout/**", "**/billing/**", "**/stripe/**", "**/card/**"]
command = "$CLAUDE_PROJECT_DIR/.claude/hooks/payment-security-validator.py"
run_in_background = false
timeout = 10000
description = "PCI DSS compliance and payment security"

# Stop Hooks - Cleanup
[[hooks]]
event = "Stop"
command = """cd $CLAUDE_PROJECT_DIR && \
echo \"üèÅ Session ended. Summary:\" && \
echo \"   Files modified: $(git diff --name-only | wc -l)\" && \
echo \"   Lines changed: +$(git diff --numstat | awk '{sum+=$1} END {print sum}') -$(git diff --numstat | awk '{sum+=$2} END {print sum}')\""""
run_in_background = false
description = "Session summary"