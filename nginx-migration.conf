# Nginx Configuration for Express to LoopBack 4 Migration
# This configuration routes traffic between Express and LoopBack 4 servers
# during the migration period.

upstream express_backend {
    server localhost:3002 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

upstream loopback_backend {
    server localhost:3000 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# Migration phase configuration
map $migration_phase $backend_choice {
    default "express";
    "phase1" "mixed";
    "phase2" "loopback_heavy";
    "phase3" "loopback";
}

# Route mapping for gradual migration
map $uri $target_backend {
    # Phase 1: Migrate authentication endpoints to LoopBack
    ~^/api/admin/auth/(login|logout|me|refresh)$ "loopback";
    ~^/api/admin/auth/change-password$ "loopback";
    ~^/api/admin/auth/forgot-password$ "loopback";
    ~^/api/admin/auth/reset-password$ "loopback";
    
    # Phase 2: Migrate read-only endpoints
    ~^/api/courses$ "loopback";
    ~^/api/course-sessions$ "loopback";
    ~^/api/venues$ "loopback";
    ~^/api/admin/courses$ "loopback";
    ~^/api/admin/venues$ "loopback";
    ~^/api/admin/schedules$ "loopback";
    
    # Phase 3: Migrate critical write operations
    ~^/api/bookings/create-payment-intent$ "loopback";
    ~^/api/admin/sessions/.*/attendance$ "loopback";
    ~^/api/admin/dashboard/overview$ "loopback";
    ~^/api/admin/analytics/comprehensive$ "loopback";
    
    # Phase 4: Migrate remaining endpoints
    ~^/api/admin/bookings$ "loopback";
    ~^/api/tracking/event$ "loopback";
    ~^/ping$ "loopback";
    
    # Default: Route to Express
    default "express";
}

server {
    listen 80;
    listen [::]:80;
    server_name api.reactfasttraining.co.uk;
    
    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name api.reactfasttraining.co.uk;
    
    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/api.reactfasttraining.co.uk/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.reactfasttraining.co.uk/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    
    # Security headers
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Request logging for migration monitoring
    access_log /var/log/nginx/migration_access.log combined;
    error_log /var/log/nginx/migration_error.log warn;
    
    # Custom log format for tracking migration
    log_format migration '$remote_addr - $remote_user [$time_local] '
                        '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent" '
                        'backend=$target_backend response_time=$upstream_response_time';
    
    access_log /var/log/nginx/migration_tracking.log migration;
    
    # Client body size limit (for file uploads)
    client_max_body_size 10M;
    
    # Timeouts
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    
    # Health check endpoint (always use Express for now)
    location /health {
        proxy_pass http://express_backend;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
    }
    
    # Migration status endpoint
    location /migration/status {
        proxy_pass http://localhost:3003;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
    }
    
    # API routing based on migration phase
    location /api {
        # Determine which backend to use
        set $backend $target_backend;
        
        # Route to appropriate backend
        if ($backend = "loopback") {
            proxy_pass http://loopback_backend;
        }
        if ($backend = "express") {
            proxy_pass http://express_backend;
        }
        
        # Common proxy settings
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
        
        # Enable keepalive
        proxy_set_header Connection "keep-alive";
        
        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        
        # Add backend identifier header for debugging
        add_header X-Backend-Server $backend always;
        
        # Error handling
        proxy_intercept_errors on;
        error_page 502 503 504 @fallback;
    }
    
    # Fallback to Express if LoopBack fails
    location @fallback {
        proxy_pass http://express_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Fallback "true";
        add_header X-Backend-Server "express-fallback" always;
    }
    
    # Static files (if any)
    location /static {
        root /var/www/api.reactfasttraining.co.uk;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # Ping endpoint for monitoring
    location /ping {
        set $backend $target_backend;
        
        if ($backend = "loopback") {
            proxy_pass http://loopback_backend;
        }
        if ($backend = "express") {
            proxy_pass http://express_backend;
        }
        
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        add_header X-Backend-Server $backend always;
    }
}

# Development configuration (localhost)
server {
    listen 8080;
    server_name localhost;
    
    # Same routing logic as production
    location /api {
        set $backend $target_backend;
        
        if ($backend = "loopback") {
            proxy_pass http://loopback_backend;
        }
        if ($backend = "express") {
            proxy_pass http://express_backend;
        }
        
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        add_header X-Backend-Server $backend always;
    }
    
    # Migration dashboard
    location /migration {
        proxy_pass http://localhost:3003;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
    }
}